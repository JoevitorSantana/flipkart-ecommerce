-----------Criando projeto de Ecomerce-----------

01 - criar a pasta backend e entrar nela

- npm init ou yarn init

- npm install --save express express-validator mongoose
- npm install --save dotenv
- npm install --save body-parser

02 - criar a pasta src e arquivo index.server.js

const express = require('express');
const env = require('dotenv');
const app = express();
const bodyParser = require('body-parser');

env.config();

app.listen(process.env.PORT, () => {
    console.log(`Server is running on port ${process.env.PORT}`);
})

03 - criar o arquivo .env inserindo

- PORT=2000

04 - rodar a aplicação
- node src/index.server.js

05 - criar as rotas

app.get('/', (req, res, next) => {
    res.status(200).json({
        message: 'Hello from server'
    });
});

app.post('/data', (req, res, next) => {
    res.status(200).json({
        message: req.body
    });
});

06 - instalar o nodemon

- npm install --save-dev nodemon
- em pkg.json nos "scripts" adicionar
"start": "nodemon ./src/index.server.js"
- adicionar no index
app.use(bodyParser());

07 - rodar a aplicação com o yarn start


------------Criando Cluster no MongoDB-------------

01 - Acessar o MongoDB e criar um cluster grátis

02 - Selecionar
- AWS
- N. Virginia
- Create Cluster

03 - ir até Network Access

- Add Ip address
- select Allow access from anywhere

04 - Conectar ao cluster

- criar um username e um password

root
rootJoe

- escoler um método de conexão
- Connect your application

- copiar a string de conexão

// mongodb+srv://root:<password>@cluster0.42ke1.mongodb.net/myFirstDatabase?retryWrites=true&w=majority

05 - importar o mongoose no server

const mongoose = require('mongoose');

mongoose.connect(
    `mongodb+srv://${process.env.MONGO_DB_USER}:${process.env.MONGO_DB_PASSWORD}@cluster0.42ke1.mongodb.net/${process.env.MONGO_DB_DATABASE}?retryWrites=true&w=majority`,
    {
        useNewUrlParser: true,
        useUnifiedTopolofy: true,
        useCreateIndex: true
    }
).then(() => {
    console.log('Database connected');
});

06 - no arquivo .env adicionar

MONGO_DB_USER=root
MONGO_DB_PASSWORD=rootJoe
MONGO_DB_DATABASE=ecommerce


-------------Criando Rotas----------------

01 - criar a pasta routes, models e controller

02 - criar o arquivo de rota user.js

const express = require('express');
const router = express.Router('router');

router.post('/signin', (req, res) => {

})

router.post('/signup', (req, res) => {
    
})

module.exports = router;

03 - no index.server.js

- importar o userRoutes no index
const userRoutes = require('./routes/user');

- remover as rotas que estão criadas

- adicionar o userRoutes

app.user('/api', userRoutes);

04 - criar o model user.js

const mongoose = require('mongoose');
const bcrypt = require('bcrypt'); //npm --save bcrypt

const userSchema = new mongoose.Schema({
    firstName: {
        type: String,
        required: true,
        trim: true,
        min: 3,
        max: 20
    },
    lastName: {
        type: String,
        required: true,
        trim: true,
        min: 3,
        max: 20
    },
    userName: {
        type: String,
        required: true,
        trim: true,
        unique: true,
        index: true,
        lowercase: true        
    },
    email: {
        type: String,
        required: true,
        trim: true,
        unique: true,
        lowercase: true
    },
    hash_password: {
        type: String,
        required: true
    },
    role: {
        type: String,
        enum: ['user', 'admin'],
        defauult: 'user'
    },
    contactNumber: {type: String},
    profilePicture: {type: String},    
}, {timestamps: true});

userSchema.virtual('password')
.set(function(password){
    this.hash_password = bcrypt.hashSync(password, 10);
});

userSchema.virtual('fullName)
.get(function(){
    return `${this.firstName} ${this.lastName}`;
})

userSchema.methods = {
    authenticate: function(){
        return bcrypt.compareSync(password, this.hash_password);
    }
}

module.exports = mongoose.model('User', userSchema);

05 - no arquivo de rotas

const User = require('../models/user');

- na rota signup

User.findOne({ email: req.body.email})
.exec((error, user) => {
    if(user) return res.status(400.json({
        message: 'user already exists'
    }))

    const {firstName, lastName, email, password} = req.body;
    const _user = new User({firstName, lastName, email, password, username: Math.random().toString()});    

    _user.save((error, data) => {
        if(error){
            return res.status(400).json({
                message: 'somethong went wrong'
            });
        }

        if(data){
            return res.status(201).json({
                message: 'User created succesfully..!'
            })
        }
    })
})

06 - criar o controller auth.js

- copiar o conteúdo da rota signup e passar para o controller

const User = require('../models/user');

exports.signup = (req, res) => {
    User.findOne({ email: req.body.email})
    .exec((error, user) => {
        if(user) return res.status(400.json({
            message: 'user already exists'
        }))

        const {firstName, lastName, email, password} = req.body;
        const _user = new User({firstName, lastName, email, password, userName: Math.random().toString()});    

        _user.save((error, data) => {
            if(error){
                return res.status(400).json({
                    message: 'somethong went wrong'
                });
            }

            if(data){
                return res.status(201).json({
                    message: 'User created succesfully..!'
                })
            }
        })
    })
}

07 - adicionar o signup na rota signup

- router.post('/signup', signup);



-------------Login admin-----------------

01 - abrir o cluster e apagar a collection users que foi criadas

02 - renomear o arquivo de rota user.js para auth.js

03 - alterar para authRoutes lá no index

04 - instalar o jsonwebtoken

- npm install --save jsonwebtoken

04 - no controller auth.js adicionar

const jwt = require('jsonwebtoken');

exports.signin = (req, res) => {
    User.findOne({email: req.body.email})
    .exec((error, user) => {
        if(error) return res.status(400).json({error});
        if(user){
            if(user.authenticate(req.body.password)){
                const token = jwt.sign({_id: user._id, role: user.role}, process.env.JWT_SECRET, {expiresIn: '1h'});
                const {_id, firstName, lastName, email, role, fullName} = user;
                res.status(200).json({
                    token,
                    user: {
                        _id, firstName, lastName, email, role, fullName
                    }
                });
            } else {
                return res.status(400).json({message: 'password incorrect!})
            }
        } else {
            return res.status(400).json({message: 'Something went wrong});
        }
    })
}

exports.requireSignIn = (req, res, next)=> {
   const token = req.headers.authorization.split(" ")[1];
   const user = jwt.verify(token, process.env.JWT_SECRET); 
   req.user = user
   next();
}

05 - passar o controller signin na rota signin

06 - criar a rota em auth.js
router.post('/profile', requireSignIn, (req, res) => {
    res.status(200).json({ user: 'profile'})
})

07 - não esquecer de passar os tokens no header da requisição

08 - criar a pasta admin em controllers e copiar o auth.js para lá 

adicionar role: 'admin' em const _user

- alterar o if

if(user.authenticate(req.body.password) && user.role === 'admin')

09 - realizar criar a pasta admin em routes e copiar o arquivo auth.js pra lá adicionar admin antes ds rotas


--------------------------04 - Admin App setup Layout-------------------------

01 - Criar o projeto front-end

npx create-react-app admin-app

- no arquivo package.json em scripts modificar:

"start":"set PORT=4000 && react-scripts start", //para linux colocar somente o PORT=4000

02 - instalar o react bootstrap

*versões do vídeo
- bootstrap@4.5.2
- react-bootstrap@1.3.0

npm install react-bootstrap bootstrap --save

- instalar também o react-router-dom

*versões do vídeo
- @5.2.0

npm install --save react-router-dom

03 - ir no Google fonts selecionar a fonte Open Sans nos tamanho 300, 400, 600 e 700 e copiar o link para o index.html da pasta public

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600;700&display=swap" rel="stylesheet">

- também no index.html copiar o link do cdn de estilização do react-bootstrap

<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css"
  integrity="sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l"
  crossorigin="anonymous"
/>

04 - criar a pasta components com as subpastas Layout e Header

05 - dentro da pasta Header criar o arquivo index.js

import React from 'react';

export function Header(props){
    return(
        <Navbar collapseOnSelect expand="lg" bg="dark" variant="dark">
            <Container>
                {/*<Navbar.Brand href="#home">React-Bootstrap</Navbar.Brand>*/}
                <Link to="/" className="navbar-brand">Admin dashboard</Link>
                <Navbar.Toggle aria-controls="responsive-navbar-nav" />
                <Navbar.Collapse id="responsive-navbar-nav">
                    <Nav className="mr-auto">
                        <Nav.Link href="#features">Features</Nav.Link>
                        <Nav.Link href="#pricing">Pricing</Nav.Link>
                        {/*<NavDropdown title="Dropdown" id="collasible-nav-dropdown">
                            <NavDropdown.Item href="#action/3.1">Action</NavDropdown.Item>
                            <NavDropdown.Item href="#action/3.2">Another action</NavDropdown.Item>
                            <NavDropdown.Item href="#action/3.3">Something</NavDropdown.Item>
                            <NavDropdown.Divider />
                            <NavDropdown.Item href="#action/3.4">Separated link</NavDropdown.Item>
                        </NavDropdown>*/}
                    </Nav>
                    <Nav>
                        {/*<Nav.Link href="#deets">More deets</Nav.Link>*/}     

                        <li className="nav-item">
                            <NavLink to="signin className="nav-link">SignIn</NavLink>
                        </li>

                        <li className="nav-item">
                            <NavLink to="signup className="nav-link">SignUp</NavLink>
                        </li>

                    </Nav>
                </Navbar.Collapse>        
            </Container>
        </Navbar>
    )
}

- dar uma limpada neste header conforme o vídeo

06 - Na pasta Layout criar o arquivo index.js

export function Layout(props){
    return(
        <Header />
        {props.children}
    )
}

07 - em /src criar a pasta container e as subpastas Home, SignIn e SignUp e em cada subpasta desta criar o arquivo index.js

08 - no arquivo App.js adicionar o BrowserRouter

import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';

<Router>
    <Switch>
        <Route path="/" exact component={Home} />
        <Route path="/signin" component={SignIn} />
        <Route path="/signup" component={SignUp} />
    </Switch>
</Router>

09 - em index.css substituir o font-family por

font-family: 'Open Sans', 'sans-serif';

10 - no arquivo da página Home adicionar

export function Home(){
    return(
        <Layout>
            <Jumbotron style={{margin: 5rem, background: '#fff'}} className="text-center">
                <h1>Bem-vindo ao painel de administração</h1>            
            </Jumbotron>
        </Layout>
    )
}

11 - no arquivo da página SignIn

export function SignIn(){
    return(
        <Layout>
            <Container>     
                <Row style={{marginTop: '50px'}}>
                    <Col md={{span: 6, offset: 3}}>
                        <Form>
                            <Form.Group controlId="formBasicEmail">
                                <Form.Label>Email address</Form.Label>
                                <Form.Control type="email" placeholder="Enter email" />
                                <Form.Text className="text-muted">
                                We'll never share your email with anyone else.
                                </Form.Text>
                            </Form.Group>

                            <Form.Group controlId="formBasicPassword">
                                <Form.Label>Password</Form.Label>
                                <Form.Control type="password" placeholder="Password" />
                            </Form.Group>                            
                            <Button variant="primary" type="submit">
                                Submit
                            </Button>
                        </Form>                    
                    </Col>
                </Row>       
            </Container>
        </Layout>
    );
}

12 - na pasta componentes criar a pasta UI com a subpasta Input e arquivo index.js

export function Input(props){
    return(
        <Form.Group controlId="formBasicEmail">
            <Form.Label>{props.label}</Form.Label>
            <Form.Control 
                type={props.type} 
                placeholder={props.placeholder}
                value={props.value}
                onChange={props.onChange}
            />
            <Form.Text className="text-muted">
            {props.errorMessage}
            </Form.Text>
        </Form.Group>
    );
};

12 - na página de SignUp

export function SignUp(){
    return(
        <Layout>
            <Container>     
                <Row style={{marginTop: '50px'}}>
                    <Col md={{span: 6, offset: 3}}>
                        <Form>
                            <Row>
                                <Col md={6}>
                                    <Input /
                                        type="text"
                                        placeholder="Primeiro nome"
                                        label="Primeiro nome"
                                        value=""
                                        onChange={() => {}}
                                    >                                   
                                </Col>
                                <Col md={6}>
                                    <Input /
                                        type="text"
                                        placeholder="Sobrenome"
                                        label="Sobrenome"
                                        value=""
                                        onChange={() => {}}
                                    >                                   
                                </Col>
                            </Row>
                            <Input 
                                type="email"
                                label="Email"
                                placeholder="Digite um email"
                                value=""
                                onChange={() => {}}
                            />         

                            <Input 
                                type="password"
                                label="Senha"
                                placeholder="Digite uma senha"
                                value=""
                                onChange={() => {}}
                            />   
                                                     
                            <Button variant="primary" type="submit">
                                Enviar
                            </Button>
                        </Form>                    
                    </Col>
                </Row>       
            </Container>
        </Layout>
    );
}



------------------------------05 - API request validation----------------------------

01 - criar a pasta validators e o arquivo auth.js

- importar  o express-validator

const { check, validationResult } = require('express-validator');

exports.validateSignUpRequest = [
    check('firstName')
    .notEmpty()
    .withMessage('firstName is required'),
    check('lastName')
    .notEmpty()
    .withMessage('lastName is required'),
    check('email')
    .isEmail()
    .withMessage('valid email is required'),
    check('password')
    .isLength({min: 6})
    .withMessage('password must be at least 6 character long')
];

exports.validateSignInRequest = [    
    check('email')
    .isEmail()
    .withMessage('valid email is required'),
    check('password')
    .isLength({min: 6})
    .withMessage('password must be at least 6 character long')
];

exports.isRequestValidated = (req, res, next) => {
    const errors = validationResult(req);
    if(errors.array().length > 0){
        return res.status(400).json({error: errors.array()[0].msg})
    }

    next();
}

02 - No arquivo auth.js da pasta routes

- adicionar as validações como middlewares nas rotas normais e admin


-------------------------06 - Categories and subcategories Rest API--------------------------

01 - em models criar o arquivo category.js

const mongoose = require('mongoose');

const categorySchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true
    },
    slug: {
        type: String,
        required: true,
        unique: true
    },
    parentId: {
        type: String,
    }
}, {timestamps: true});

module.exports = mongoose.model('Category', categorySchema);

02 - instalar o slugify

npm install --save slugify

03 - criar o controller category.js

const Category = require('../models/category');
const slugify = require('slugify');

function createCategories(categories, parentId = null){
    const categoryList = [];
    let category;
    if(parentId == null){
        category = categories.filter(cat => cat.parentId == undefined);
    } else {
        category = categories.filter(cat => cat.parentId == parentId);
    }
    
    for(let cate of category){
        categoryList.push({
            _id: cate._id,
            name: cate.name,
            slug: cate.slug,
            children: createCategories(categories, cate._id)
        });
    }

    return categoryList;
}

exports.addCategory = (req, res) => {
    const categoryObj = {
        name: req.body.name,
        slug: slugify(req.body.name)
    }

    if(req.body.parentId){
        categoryObj.parentId = req.body.parentId;
    }

    const cat = new Category(categoryObj);
    cat.save((error, category) => {
        if(error) return res.status(400).json({error});
        if(category){
            return res.status(201).json({category});
        }
    });
}

exports.getCategories = (req, res) => {
    Category.find({})
    .exec((error, categories) => {
        if(error) retrn res.status(400).json({error});

        if(categories){

            const categoryList = createCategories(categories);

            res.status(200).json({categoryList});
        }
    })
}

03 - criar a pasta middlewares e o arquivo index.js

- colocar o método requireSignIn aqui neste middlewares

const jwt = require('jsonwebtoken');

exports.requireSignIn = (req, res, next) => {
    if(req.headers.authorization){
        const token = req.headers.authorization.split(' ')[1];
        const user = jwt.verify(token, process.env.JWT_SECRET);
        req.user = user;        
    } else {
        return res.status(400).json({ message: 'Authorization required'});
    }

    next();
    
}

exports.userMiddleware = (req, res, next) => {
    if(req.user.role !== 'user'){
        return res.status(400).json({ message: 'User Access denied' })
    }

    next();
}

exports.adminMiddleware = (req, res, next) => {
    if(req.user.role !== 'admin'){
        return res.status(400).json({ message: 'Admin Access denied' })
    }

    next();
}

03 - em routes criar o arquivo de rotas category.js

router.post('/categories/create', requireSignIn, adminMiddleware, addCategory);
router.get('/categories', getCategories);

module.exports = router;

04 - importar a rota no index.server.js

const categoryRoutes = require('./routes/category');

app.use('/api', categoryRoutes);

05 - testar a rota no insomnia

- criar as categorias
Eletrônicos
Esportes, livros e mais
Homem
Smartphones(com parentId de eletrônicos)
Samsung(com parentId de Smartphones)