-----------Criando projeto de Ecomerce-----------

01 - criar a pasta backend e entrar nela

- npm init ou yarn init

- npm install --save express express-validator mongoose
- npm install --save dotenv
- npm install --save body-parser

02 - criar a pasta src e arquivo index.server.js

const express = require('express');
const env = require('dotenv');
const app = express();
const bodyParser = require('body-parser');

env.config();

app.listen(process.env.PORT, () => {
    console.log(`Server is running on port ${process.env.PORT}`);
})

03 - criar o arquivo .env inserindo

- PORT=2000

04 - rodar a aplicação
- node src/index.server.js

05 - criar as rotas

app.get('/', (req, res, next) => {
    res.status(200).json({
        message: 'Hello from server'
    });
});

app.post('/data', (req, res, next) => {
    res.status(200).json({
        message: req.body
    });
});

06 - instalar o nodemon

- npm install --save-dev nodemon
- em pkg.json nos "scripts" adicionar
"start": "nodemon ./src/index.server.js"
- adicionar no index
app.use(bodyParser());

07 - rodar a aplicação com o yarn start


------------Criando Cluster no MongoDB-------------

01 - Acessar o MongoDB e criar um cluster grátis

02 - Selecionar
- AWS
- N. Virginia
- Create Cluster

03 - ir até Network Access

- Add Ip address
- select Allow access from anywhere

04 - Conectar ao cluster

- criar um username e um password

root
rootJoe

- escoler um método de conexão
- Connect your application

- copiar a string de conexão

// mongodb+srv://root:<password>@cluster0.42ke1.mongodb.net/myFirstDatabase?retryWrites=true&w=majority

05 - importar o mongoose no server

const mongoose = require('mongoose');

mongoose.connect(
    `mongodb+srv://${process.env.MONGO_DB_USER}:${process.env.MONGO_DB_PASSWORD}@cluster0.42ke1.mongodb.net/${process.env.MONGO_DB_DATABASE}?retryWrites=true&w=majority`,
    {
        useNewUrlParser: true,
        useUnifiedTopolofy: true,
        useCreateIndex: true
    }
).then(() => {
    console.log('Database connected');
});

06 - no arquivo .env adicionar

MONGO_DB_USER=root
MONGO_DB_PASSWORD=rootJoe
MONGO_DB_DATABASE=ecommerce


-------------Criando Rotas----------------

01 - criar a pasta routes, models e controller

02 - criar o arquivo de rota user.js

const express = require('express');
const router = express.Router('router');

router.post('/signin', (req, res) => {

})

router.post('/signup', (req, res) => {
    
})

module.exports = router;

03 - no index.server.js

- importar o userRoutes no index
const userRoutes = require('./routes/user');

- remover as rotas que estão criadas

- adicionar o userRoutes

app.user('/api', userRoutes);

04 - criar o model user.js

const mongoose = require('mongoose');
const bcrypt = require('bcrypt'); //npm --save bcrypt

const userSchema = new mongoose.Schema({
    firstName: {
        type: String,
        required: true,
        trim: true,
        min: 3,
        max: 20
    },
    lastName: {
        type: String,
        required: true,
        trim: true,
        min: 3,
        max: 20
    },
    userName: {
        type: String,
        required: true,
        trim: true,
        unique: true,
        index: true,
        lowercase: true        
    },
    email: {
        type: String,
        required: true,
        trim: true,
        unique: true,
        lowercase: true
    },
    hash_password: {
        type: String,
        required: true
    },
    role: {
        type: String,
        enum: ['user', 'admin'],
        defauult: 'user'
    },
    contactNumber: {type: String},
    profilePicture: {type: String},    
}, {timestamps: true});

userSchema.virtual('password')
.set(function(password){
    this.hash_password = bcrypt.hashSync(password, 10);
});

userSchema.virtual('fullName)
.get(function(){
    return `${this.firstName} ${this.lastName}`;
})

userSchema.methods = {
    authenticate: function(){
        return bcrypt.compareSync(password, this.hash_password);
    }
}

module.exports = mongoose.model('User', userSchema);

05 - no arquivo de rotas

const User = require('../models/user');

- na rota signup

User.findOne({ email: req.body.email})
.exec((error, user) => {
    if(user) return res.status(400.json({
        message: 'user already exists'
    }))

    const {firstName, lastName, email, password} = req.body;
    const _user = new User({firstName, lastName, email, password, username: Math.random().toString()});    

    _user.save((error, data) => {
        if(error){
            return res.status(400).json({
                message: 'somethong went wrong'
            });
        }

        if(data){
            return res.status(201).json({
                message: 'User created succesfully..!'
            })
        }
    })
})

06 - criar o controller auth.js

- copiar o conteúdo da rota signup e passar para o controller

const User = require('../models/user');

exports.signup = (req, res) => {
    User.findOne({ email: req.body.email})
    .exec((error, user) => {
        if(user) return res.status(400.json({
            message: 'user already exists'
        }))

        const {firstName, lastName, email, password} = req.body;
        const _user = new User({firstName, lastName, email, password, userName: Math.random().toString()});    

        _user.save((error, data) => {
            if(error){
                return res.status(400).json({
                    message: 'somethong went wrong'
                });
            }

            if(data){
                return res.status(201).json({
                    message: 'User created succesfully..!'
                })
            }
        })
    })
}

07 - adicionar o signup na rota signup

- router.post('/signup', signup);



-------------Login admin-----------------

01 - abrir o cluster e apagar a collection users que foi criadas

02 - renomear o arquivo de rota user.js para auth.js

03 - alterar para authRoutes lá no index

04 - instalar o jsonwebtoken

- npm install --save jsonwebtoken

04 - no controller auth.js adicionar

const jwt = require('jsonwebtoken');

exports.signin = (req, res) => {
    User.findOne({email: req.body.email})
    .exec((error, user) => {
        if(error) return res.status(400).json({error});
        if(user){
            if(user.authenticate(req.body.password)){
                const token = jwt.sign({_id: user._id}, process.env.JWT_SECRET, {expiresIn: '1h'});
                const {_id, firstName, lastName, email, role, fullName} = user;
                res.status(200).json({
                    token,
                    user: {
                        _id, firstName, lastName, email, role, fullName
                    }
                });
            } else {
                return res.status(400).json({message: 'password incorrect!})
            }
        } else {
            return res.status(400).json({message: 'Something went wrong});
        }
    })
}

exports.requireSignIn = (req, res, next)=> {
   const token = req.headers.authorization.split(" ")[1];
   const user = jwt.verify(token, process.env.JWT_SECRET); 
   req.user = user
   next();
}

05 - passar o controller signin na rota signin

06 - criar a rota em auth.js
router.post('/profile', requireSignIn, (req, res) => {
    res.status(200).json({ user: 'profile'})
})

07 - não esquecer de passar os tokens no header da requisição

08 - criar a pasta admin em controllers e copiar o auth.js para lá 

adicionar role: 'admin' em const _user

- alterar o if

if(user.authenticate(req.body.password) && user.role === 'admin')

09 - realizar criar a pasta admin em routes e copiar o arquivo auth.js pra lá adicionar admin antes ds rotas



